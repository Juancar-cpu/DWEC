Usando la desestructuración de objetos se puede separar en variables las propiedades que tenga un objeto. Los métodos o elementos DOM
 no podemos desestructurarlos y lanzaran un fallo

const user = {name:"otto", role:'arquero', life:99}

//como se desestructura
const{name, role, life} = user;
console.log(name);
console.log(role, life);

console.log({name, role, life});//Con las {} volvemos a estructurar para mostrar

La diferencia fundamental está en como se almacena en la memoria. Un objeto ocupa memoria más eficientemente que las variables primitivas

--------------------------------------------------------------------------------------------------------------------------------------------------
const user = {name:"otto", role:'arquero', life:99, features:["learn", "code", "paint"]}
const fullUser = {...user, power:25, life:50}
console.log(user.features); //["learn", "code", "paint"]
console.log(fullUser.features); //["learn", "code", "paint"]
fullUser.features[0] = "program";
console.log(fullUser.features); //["program", "code", "paint"]//empieza la referencia
console.log(user.features); //["program", "code", "paint"]

En este ejemplo se crea el objeto fullUser con las mismas propiedades de user añadiendole la nueva propiedad power y sobreescribiendo life con 50
En el caso de hacer ...user al final(en lugar de al principio), se le dara prefenerencia a las propiedades de user, que sobreescribiran las propiedades 
definidas inicialmente. El orden si influye

Trabajando con valores primitivos en js se pasan por valor
Pero, para valores complejos se utiliza el paso por referencia
Eso supone que los tipos de datos complejos no son copias, son refenrecias(algo así como accesos directos)


--------------------------------------------------------------------------------------------------------------------------------------------------
structuredClone()
Esa funcion hara una copia, devolviendo un nuevo objeto, en lugar de una referencia

console.log(user.features); //["learn", "code", "paint"]
console.log(fullUser.features); //["learn", "code", "paint"]
fullUser.features[0] = "program";
console.log(fullUser.features); //["program", "code", "paint"]
console.log(user.features); //["learn", "code", "paint"] //Al no ser ya una refenrencia, no machaca lo que no debe
--------------------------------------------------------------------------------------------------------------------------------------------------
Rest
-------------------------
Metodos de object
object.keys: Devuelve array de los indices del iterable
OBJECT.VALUES: Array de los contenidos del iterableObject.entries
object.entries: devuelve un array de los pares clave valor