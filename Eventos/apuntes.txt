hasta ahora usamos prog tradicional, instrucciones que se ejecutan segun secuencia

Programacion basada en eventos: instrucciones se generan cuando pasa algo, excepto uno automatico que sucede cuando termina la carga de la pagina: onload


Un evento es cualquier suceso que puede producirse en un elemento de la web. Un mecanismo que puede provocar una reaccion mediante la 
ejecución de un codigo especifico
El manejo de evento es la accion que nos permite ejecutar un codigo
por ejemplo: pulsar un boton, pulsar una tecla, pulsar un elemento html, modificar un campo de texto, etc.

Capturar un evento es programar la accion. El DOM es quien gestiona

Los eventos suelen empezar por on(onclick), pero no siempre


Manejo de eventos
Modelo de eventos en linea: Utiliza los eventos como atributos html. Es el menos recomendable, ya abandonado porque no deja trabajar en equipo
        Cada elemento xhtml tiene sus posibles eventos como propiedades(nombre de evento es on seguido de la accion)
        El codigo se asocia a un atrib uto del eleemento html: <input typebutton value Bot hola onclick=alert(hola)>
        Existe la posibilidad el objeto this, que es una referencia al elemento DOM, donde se ha producido el evento


Modelo tradicional: Consiste en aplicar sobre un elemento seleccionado a traves de js un evento de la forma onnombreeleemnto.
        Tampoco nos sirve mucho porque no nos permite asociar multiples eventos a un solo elemento
        Desde el punto organizativo es mejor que eventos en linea


Metodo addEventListener: Se utiliza para vincular un evento a una funcion js.
        Los parametos son: El evento(El nombre sin on), la funcion a ejecutar, useCapture(generalemnte a false)
        Este metodo es como poner a los elementos html un sensor que detecte cada vez que se hace click, os e pasa el raton por encima, etc
        elemento.addEventListener("<evento_sin_on>", <funcion>, <false/true>);
        Este metodo si que separa totalemnte el html del JS
        Las funciones pueden ser anonimas(podemos definirlas en el propio addEventListener en lugar de poner solo su nombre)
        addEventListener no funciona en Internet explorer, usamos el attachEvent (elemento.attachEvent("<evento_sin_on>", <funcion>);)



PRINCIPALES EVENTOS
onblur: Ocurre cuando un elemento HTML pierde focus. Se suele usar en campos input y en la validación de formularios
onchange:
onfocus
onselect
onsubmit
onreset
onkeydown
onkeypress
onkeyup



Hay acciones que provocan varios eventos a la vez. Por ejemplo, submit desencadena onmousedown, onclick, onmouseup, onsubmit
Para evitar que el navegador ejecute la accion por defecto necesitamos añadir "return false"
También se puede preguntar a usuario si quiere ir o no a la pagina por defecto

IMPORTANTE
No ejecutar ningun JS hasta que no se haya cargado por completo la pagina
<body onload="funcion a ejecutar">(primera de JS)
body onload=alert(La pagina se ha cargado correctamente)


RESUMEN
EVENTO: Mecanismo que se acciona cuando el usuario realiza un cambio sobre la pagina web
Capturar un evento es programar una accion para que se realice una tarea
El encargado de gestionar los eventos es el DOM
MANEJADOR: Accion que se va a manejar. Por ejemplo, en el evento click el manejador es onclick.


